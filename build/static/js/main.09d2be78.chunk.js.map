{"version":3,"sources":["components/textInput.js","components/deleteButton.js","components/task.js","components/taskList.js","components/todoTitle.js","components/requestApi.js","components/todo.js","App.js","serviceWorker.js","index.js"],"names":["TextInput","props","useState","value","state","setState","type","className","onKeyUp","event","target","trim","keyCode","onEnterPress","onChange","DeleteButton","onClick","Task","task","id","content","status","onDelete","TaskList","tasks","taskList","map","key","TodoTitle","isEditable","setEditable","deleteTodo","style","cursor","postReq","url","data","fetch","method","headers","body","JSON","stringify","then","res","json","taskId","title","Todo","lastTaskId","todo","setTodo","updateTodo","requestApi","useEffect","margin","width","App","display","flexWrap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.09d2be78.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst TextInput = (props) => {\n  const [state, setState] = useState({ value: props.value || '' });\n\n  const handleChange = (event) => {\n    setState({ value: event.target.value });\n  };\n\n  const handleKeyUp = (event) => {\n    const value = event.target.value.trim();\n    if (event.keyCode === 13 && value !== '') {\n      props.onEnterPress(state.value);\n      setState({ value: '' });\n    }\n  };\n\n  return (\n    <input\n      type=\"text\"\n      className={props.className}\n      value={state.value}\n      onKeyUp={handleKeyUp}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default TextInput;\n","import React from 'react';\n\nconst DeleteButton = (props) => {\n  return (\n    <span className={props.className} onClick={props.onClick}>\n      X\n    </span>\n  );\n};\n\nexport default DeleteButton;\n","import React from 'react';\nimport '../task.css';\nimport DeleteButton from './deleteButton';\n\nconst Task = (props) => {\n  const { id, content, status } = props.task;\n  return (\n    <div className={`taskContainer ${status}`}>\n      <div className=\"taskIcon\"></div>\n      <div className=\"taskContent\">\n        <p onClick={() => props.onClick(id)}>{content}</p>\n        <DeleteButton\n          className=\"deleteTaskBtn\"\n          onClick={() => props.onDelete(id)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Task;\n","import React from 'react';\nimport Task from './task';\n\nconst TaskList = function(props) {\n  const { tasks, onClick, onDelete } = props;\n  const taskList = tasks.map((task) => {\n    return (\n      <Task task={task} key={task.id} onClick={onClick} onDelete={onDelete} />\n    );\n  });\n  return <div>{taskList}</div>;\n};\n\nexport default TaskList;\n","import React, { useState } from 'react';\nimport TextInput from './textInput';\nimport DeleteButton from './deleteButton';\n\nconst TodoTitle = (props) => {\n  const [isEditable, setEditable] = useState(false);\n\n  const { value, onChange, deleteTodo } = props;\n\n  const handleClick = () => {\n    setEditable(true);\n  };\n\n  const handleTitleChange = (value) => {\n    setEditable(false);\n    onChange(value);\n  };\n\n  return isEditable ? (\n    <TextInput\n      className=\"todoTitle\"\n      value={value}\n      onEnterPress={handleTitleChange}\n    />\n  ) : (\n    <div className=\"todoTitle\" style={{ cursor: 'pointer' }}>\n      <p onClick={handleClick}>{value}</p>\n      <DeleteButton className=\"deleteTodoBtn\" onClick={() => deleteTodo()} />\n    </div>\n  );\n};\n\nexport default TodoTitle;\n","const postReq = (url, data) => {\n  return fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n};\n\nconst getTodo = () => fetch('/api/getTodo').then((res) => res.json());\n\nconst addTask = (task) => {\n  return postReq('/api/addTask', { content: task });\n};\n\nconst toggleTaskStatus = (taskId) => {\n  return postReq('/api/toggleTaskStatus', { taskId });\n};\n\nconst deleteTask = (taskId) => {\n  return postReq('/api/deleteTask', { taskId });\n};\n\nconst setTitle = (title) => {\n  return postReq('/api/setTitle', { title });\n};\n\nconst resetTodo = (title) => {\n  return postReq('/api/resetTodo');\n};\n\nexport default {\n  getTodo,\n  addTask,\n  toggleTaskStatus,\n  deleteTask,\n  setTitle,\n  resetTodo\n};\n","import React, { useState, useEffect } from 'react';\nimport TextInput from './textInput';\nimport TaskList from './taskList';\nimport TodoTitle from './todoTitle';\nimport requestApi from './requestApi';\n\nconst Todo = (props) => {\n  const [todo, setTodo] = useState({ title: '', tasks: [], lastTaskId: 0 });\n\n  const updateTodo = () => requestApi.getTodo().then(setTodo);\n\n  const toggleTaskStatus = (taskId) => {\n    requestApi.toggleTaskStatus(taskId).then(updateTodo);\n  };\n\n  useEffect(updateTodo, []);\n\n  const addTask = (content) => {\n    requestApi.addTask(content).then(updateTodo);\n  };\n\n  const deleteTask = (taskId) => {\n    requestApi.deleteTask(taskId).then(updateTodo);\n  };\n\n  const setTitle = (title) => {\n    requestApi.setTitle(title).then(updateTodo);\n  };\n\n  const deleteTodo = () => {\n    requestApi.resetTodo().then(updateTodo);\n  };\n\n  return (\n    <div style={{ margin: '10em', width: '20%' }}>\n      <div>\n        <TodoTitle\n          value={todo.title}\n          onChange={setTitle}\n          deleteTodo={deleteTodo}\n        />\n      </div>\n      <TaskList\n        tasks={todo.tasks}\n        onClick={toggleTaskStatus}\n        onDelete={deleteTask}\n      />\n      <br />\n      <TextInput onEnterPress={addTask} className=\"taskInput\" />\n    </div>\n  );\n};\nexport default Todo;\n","import React from 'react';\nimport './App.css';\nimport Todo from './components/todo';\n\nfunction App() {\n  return (\n    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}